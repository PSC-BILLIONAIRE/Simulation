# produit Client supposé défini
# Segementation supposée effectuée
import numpy as np
import scipy.stats as stats
import math
Nb_States = 10
Stock_beg = 20
dem = "somme de l'exponentielle décroissante du prix et celle de la periode"
var_demande = 0
pmax = 3
pmin = 1
k = 3
def Demand(time, price):
    if (price == 0):
        return Stock_beg 
    return int (10* np.exp(-time/2)) + int (10* np.exp(-price))


# alet Demand centrée en demand plus haut

def Prob(i,j, prix, k,l):
    if (j-l == Demand (i , prix)):
        return 1 
    return 0 
    # coder une densité ayant son maximum en Demand
    # retourner la probabilité


def reward(i,j,prix,k,l):
    return prix*(j-l)

def Esp(i,j, tab_V, prix, dic_prob, dic_rew):

    P = dic_prob[(i,j,prix)]
    V_r = tab_V[i + 1] + dic_rew[(i,j, prix)]
    return np.dot(P, V_r)


def ChooseAction(i,j, tab_V, liste_Prix, dic_prob, dic_rew):
    maximum = -np.inf
    argmax = 0
    for price in liste_Prix:
        esp = Esp(i,j,tab_V,price, dic_prob, dic_rew)
        if esp>maximum:
            maximum = esp
            argmax = price
    return maximum,argmax


def update_MDP(tab_V, liste_Prix, dic_prob, dic_rew):
    tab_int = np.zeros((Nb_States,Stock_beg))
    tab_prix = np.zeros((Nb_States,Stock_beg))

    for i in range(1,Stock_beg):
        tab_int[Nb_States-1][i] = -np.inf
    tab_int[Nb_States - 1][0] = 0 

    for i in range(Nb_States-2,0,-1):
        for j in range(Stock_beg):
            Vmax, prix = ChooseAction(i,j,tab_V,liste_Prix,dic_prob,dic_rew)
            tab_int[i][j] = Vmax
            tab_prix[i][j] = prix 

    return tab_int , tab_prix 



def main():

    pmax = 3
    pmin = 0
    liste_Prix = []
    # Creation action par pas de k
    k = 10
    pas = (pmax - pmin) / (k - 1)
    for i in range(k):
        liste_Prix = np.append(liste_Prix, (pmin + i * pas))
    # creation etats de 20h à 23h50 par pas de 10

    tab_V = np.random.rand(Nb_States, Stock_beg)*0.10
    dic_rew = {}
    for i in range(Nb_States - 1):
        for j in range(Stock_beg):
            for price in liste_Prix:
                dic_rew[(i, j, price)] = np.array([reward(i, j, price, i + 1, m) for m in range(Stock_beg)])
    dic_prob = {}
    for i in range(Nb_States-1):
        for j in range(Stock_beg):
            for price in liste_Prix:

                dic_prob[(i,j,price)] = np.array([Prob(i, j, price, i + 1, m) for m in range(Stock_beg)])

    print("Precalcul fini")
    tab_V , tab_prix= update_MDP(tab_V, liste_Prix, dic_prob, dic_rew)
    print(tab_V)
    print(tab_prix)
    tab_dem = [Demand(Nb_States - 2 , i) for i in liste_Prix ]
    print(liste_Prix)
    print(tab_dem)
    for j in range (Stock_beg):
        print(Prob(Nb_States-2 , Stock_beg-1 , liste_Prix[0], Nb_States-1,j))

if __name__ == "__main__":
    # execute only if run as a script
    main()
