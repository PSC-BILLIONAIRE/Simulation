class Client:

    # constructeur
    def __init__(self):
        # liste des champs
        self.num = 0
        self.restaurant = []
        self.plats = {} #dictionnaire (plat, nb de fois où il a mangé ce plat)
    # fin constructeur


    def commander(self, plat, nb):
        #methode qui actualise le dictionnaire plats du client à chacune de ses commandes
        if self.plats.get(plat)!=None :
            #si le client a deja commander ce plat, alors il est deja present dans le dictionnaire donc on ne fait qu'augmenter le nombre de commandes pour ce plat
            self.plats[plat]+=nb
        else :
            #c'est la premiere fois que le client commande ce plat donc on crée la clé dans le dictionaire et on initialise sa valeur
            self.plats[plat]=nb


# fin de la classe pour l'instant


class Restaurant:

    # constructeur
    def __init__(self):
        # liste des champs
        self.menu = []
        self.clients = []
    # fin constructeur


# fin de la classe pour l'instant


class Plat:

    def __init__(self):
    # listes des champs
        self.nom=''
        self.ingredients = []
        self.restaurants = []
# fin constructeur
# fin de la classe pour l'instant




##########################################################################
#############                     MAIN                   #################
##########################################################################

Dan= Client()
Lionel= Client()

pizza= Plat()
pizza.nom='pizza'
sushi=Plat()
sushi.nom='sushi'
tacos=Plat()
tacos.nom='tacos'

Dan.commander(sushi, 2)
Lionel.commander(pizza, 3)
Dan.commander(tacos, 3)
Lionel.commander(tacos,1)

for key in Dan.plats :
    print( "Dan a mangé " + str(Dan.plats[key]) +" "+ key.nom )

for key in Lionel.plats : 
    print( "Lionel a mangé " + str(Lionel.plats[key]) +" "+ key.nom )
