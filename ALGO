import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
import pydot


TAB_CLIENTS=[-1 for k in range(8)]
TAB_PLATS=[-1 for k in range(8)]
TAB_RESTAURANTS=[-1 for k in range(8)]


class Client:

    # constructeur
    def __init__(self, nom , num):
        # liste des champs
        self.nom = nom
        self.num = num
        self.restaurant = []
        self.plats = {}  # dictionnaire (plat, nb de fois où il a mangé ce plat)
        self.notes = {}  # dictionnaire (plat, note de ce palt)
        TAB_CLIENTS[self.num]=self

    # fin constructeur

    def commander(self, plat, nb):
        # methode qui actualise le dictionnaire plats du client à chacune de ses commandes
        if self.plats.get(plat) != None:
            # si le client a deja commander ce plat, alors il est deja present dans le dictionnaire donc on ne fait qu'augmenter le nombre de commandes pour ce plat
            self.plats[plat] += nb
        else:
            # c'est la premiere fois que le client commande ce plat donc on crée la clé dans le dictionaire et on initialise sa valeur
            self.plats[plat] = nb

    def setNote(self, plat, note):
        # methode qui attribue la note 'note' au plat 'plat'
        self.notes[plat] = note


# fin de la classe pour l'instant


class Restaurant:

    # constructeur
    def __init__(self):
        # liste des champs
        self.menu = []
        self.clients = []
    # fin constructeur


# fin de la classe pour l'instant


class Plat:

    def __init__(self, nom, num):
        # listes des champs
        self.nom = nom
        self.num = num
        self.ingredients = []
        self.restaurants = []
        TAB_PLATS[self.num]=self


# fin constructeur
# fin de la classe pour l'instant

MATRICE_NOTE = [[0 for k in range(8)] for k in range(8)]


def remplissage(client):
    numClient = client.num
    for plat, note in client.notes.items():
        numPlat = plat.num
        MATRICE_NOTE[numClient][numPlat] = note
    print('les notes du client numéro : ' + str(client.num) + ' on bien été enregistrées')
    return

## remplissage aléatoire
import random as rd

def remplissageAleatoire():
    for client in TAB_CLIENTS:
        if client==-1:
            break
        for plat in TAB_PLATS:
            if plat==-1:
                break
            note=rd.randint(-1,5)
            # note egale à -1 signifie plat non consommé
            client.setNote(plat,note)
        remplissage(client)
    return


##########################################################################
#############                     MAIN                   #################
##########################################################################

## creation des utilisateurs

Dan = Client('Dan', 0)
Lionel = Client('Lionel', 1)
Nicolas = Client('Nicolas', 2)
Ismael = Client('Ismael', 3)
Luc = Client('Luc', 4)
Albert = Client('Albert', 5)
Noe = Client('Noe', 6)
Didi = Client('Didi', 7)


##Creation des plats

pizza = Plat('pizza',2)
sushi = Plat('sushi',1)
tacos = Plat('tacos',3)
brochette = Plat('brochette',0)
salade_cesar = Plat('salade_cesar',4)
salade_verte = Plat('salade_verte',5)
burger = Plat('burger',6)
frite = Plat('frite',7)



Dan.setNote(brochette, 1)
Lionel.setNote(brochette, 4)
Nicolas.setNote(brochette, 5)
Ismael.setNote(brochette, 2)
Luc.setNote(brochette, 4)
Noe.setNote(brochette, 4)
Albert.setNote(brochette, 1)
Didi.setNote(brochette, 3)

Dan.setNote(sushi, 2)
Lionel.setNote(sushi, 5)
Nicolas.setNote(sushi, 5)
Ismael.setNote(sushi, 1)
Luc.setNote(sushi, 4)
Noe.setNote(sushi, 4)
Albert.setNote(sushi, 1)
Didi.setNote(sushi, 3)

Dan.setNote(pizza, 5)
Lionel.setNote(pizza, 2)
Nicolas.setNote(pizza, 1)
Ismael.setNote(pizza, 1)
Luc.setNote(pizza, 4)
Noe.setNote(pizza, 4)
Albert.setNote(pizza, 1)
Didi.setNote(pizza, 3)

Dan.setNote(tacos, 5)
Lionel.setNote(tacos, 2)
Nicolas.setNote(tacos, 2)
Ismael.setNote(tacos, 1)
Luc.setNote(tacos, 5)
Noe.setNote(tacos, 4)
Albert.setNote(tacos, 1)
Didi.setNote(tacos, 3)

Dan.setNote(salade_cesar, 1)
Lionel.setNote(salade_cesar, 3)
Nicolas.setNote(salade_cesar, 1)
Ismael.setNote(salade_cesar, 1)
Luc.setNote(salade_cesar, 2)
Noe.setNote(salade_cesar, 4)
Albert.setNote(salade_cesar, 5)
Didi.setNote(salade_cesar, 4)

Dan.setNote(salade_verte, 1)
Lionel.setNote(salade_verte, 2)
Nicolas.setNote(salade_verte, 1)
Ismael.setNote(salade_verte, 1)
Luc.setNote(salade_verte, 1)
Noe.setNote(salade_verte, 4)
Albert.setNote(salade_verte, 5)
Didi.setNote(salade_verte, 4)

Dan.setNote(burger, 3)
Lionel.setNote(burger, 4)
Nicolas.setNote(burger, 4)
Ismael.setNote(burger, 1)
Luc.setNote(burger, 4)
Noe.setNote(burger, 5)
Albert.setNote(burger, 1)
Didi.setNote(burger, 2)

for cl in TAB_CLIENTS:
    remplissage(cl)
for i in range (8):
    MATRICE_NOTE[i][7]=MATRICE_NOTE[i][6]






##Construction de la matrice utile au dataframe à partir de la matrice de note
utile = []
lignes=len(MATRICE_NOTE)
colonnes=len(MATRICE_NOTE[1])
for i in range(lignes):
    for j in range(colonnes):
        utile.append([i, j, MATRICE_NOTE[i][j]])
utile=np.array(utile)


dataset=pd.DataFrame(utile, columns=['user_id', 'item_id', 'rating'])





## ALGO DE RECOMMEND




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
import pydot



#dataset.head()

dataset.user_id = dataset.user_id.astype('category').cat.codes.values
dataset.item_id = dataset.item_id.astype('category').cat.codes.values
#import scikitlearn as sklearn

from sklearn.model_selection import train_test_split
train, test = train_test_split(dataset, shuffle=False, test_size=0.25)

import keras
from IPython.display import SVG
from keras.optimizers import Adam
from keras.utils.vis_utils import model_to_dot
n_users, n_movies = len(dataset.user_id.unique()), len(dataset.item_id.unique())
n_latent_factors = 3





from keras.constraints import non_neg




n_latent_factors_user = 18
n_latent_factors_movie = 22




movie_input = keras.layers.Input(shape=[1],name='Item')
movie_embedding = keras.layers.Embedding(n_movies + 1, n_latent_factors, name='Movie-Embedding')(movie_input)
movie_vec = keras.layers.Flatten(name='FlattenMovies')(movie_embedding)
movie_vec = keras.layers.Dropout(0.2)(movie_vec)

user_input = keras.layers.Input(shape=[1],name='User')
user_embedding = keras.layers.Embedding(n_users + 1, n_latent_factors,name='User-Embedding')(user_input)
user_vec = keras.layers.Flatten(name='FlattenUsers')(user_embedding)
concat = keras.layers.dot([movie_vec, user_vec], axes=1, normalize=False)


concat_dropout = keras.layers.Dropout(0.2)(concat)
dense = keras.layers.Dense(200,name='FullyConnected')(concat)
dropout_1 = keras.layers.Dropout(0.2,name='Dropout')(dense)
dense_2 = keras.layers.Dense(100,name='FullyConnected-1')(concat)
dropout_2 = keras.layers.Dropout(0.2,name='Dropout')(dense_2)
dense_3 = keras.layers.Dense(50,name='FullyConnected-2')(dense_2)
dropout_3 = keras.layers.Dropout(0.2,name='Dropout')(dense_3)
dense_4 = keras.layers.Dense(20,name='FullyConnected-3', activation='relu')(dense_3)


result = keras.layers.Dense(1, activation='relu',name='Activation')(dense_4)
adam = Adam(lr=0.005)
model = keras.Model([user_input, movie_input], result)
model.compile(optimizer=adam,loss= 'mean_absolute_error')

history = model.fit([train.user_id, train.item_id], train.rating, epochs=300, verbose=1)

prediction = model.predict([test.user_id, test.item_id])

