#produit Client supposé défini 
#Segementation supposé effectuée 
gamma = 0.5 #
alpha = 0.5

  
class Action : 
	def __init__(self):
		self.prix=0 #Prix
		self.heure = 10 #variation de l'heure	
	def __init__(self , prix):
		self.prix = prix
		self.heure = prix 
#On peut définir des actions de dimunition prix 

action = Action(10)

class Etat :
	#constructeur
    def __init__(self):
        self.heure = 0
        self.prix = 0
        self.demande = 0
        self.stock = 0
        self.TabAction = [action]
        
class etat_action:
	def __init__(self):
		self.etat = Etat()
		self.action = Action()
	def __init__(self , etat , action) :
		self.etat = etat 
		self.action = action 
def executer(action , etat ):
    etat_result = Etat()
    etat_result.prix = action.prix 
    etat_result.heure += action.heure 
    etat_result.demande = int (input ("demande en cours: "))
    etat_result.stock -= etat.demande 
    return etat_result
  
class Politique : 
    	
	def __init__(self): 
		self.TAction = [] #table de (Etat , Action ) 
        
def Proba(etat1 , etat2 , action): 
	if (etat2.prix != action.prix):
		return 0 
	return 1/2 #(probabilité que la demande de etat_2 soit egale a celle de etat après action a etat_1)
	
def recompense (etat): 
    return (etat.prix * etat.demande - etat.demande )
    
def utilité(etat) : 
	return recompense(etat)
	
def utilite_espere(etat , action):
	L = [Proba(etat1 , etat2 , action)*utilité(etat2) for etat2 in ETATS]
	return sum(L)
	
def utilite_espere (etat): 	
	L = [utilite_espere (etat , action) for action in ACTION]
	return recompense(etat) + gamma*max(L)
	
def Q(etat , action): #Q qualité de l'arc
		try:
			return QQ[ (etat , action) ]
		except:
			return 0
def maxQ(etat):
    result = Q(etat , etat.TabAction[0])        
    n = len (etat.TabAction)
    for i in range(1 ,n) :
        if (result   < Q(etat , etat.TabAction[i]) ):
            result = Q(etat , etat.TabAction[i])
    return result

def argmaxQ(etat):
    result = etat.TabAction[0]        
    n = len (etat.TabAction)
    for i in range(1 ,n) :
        if (Q(etat ,result )  < Q(etat , TabAction[i]) ):
            result = etat.TabAction[i]
    return result

def randomAction(etat):
    n = len (etat.TabAction)
    i = int (rd.random()*(n-1))
    return etat.TabAction[i]
QQ = {}
import random as rd 
etatinitial = Etat()
etatinitial.stock = 20

nbre_tours =5 #int ((60*24)/10)
for n in range(1 , nbre_tours): 
	alpha = 1 
	epsilon = 1  
	etatcourant = etatinitial 
	for i in range(1 , nbre_tours):
		etat = etatcourant 
		nb = rd.random()
		if (nb<epsilon):
			action = randomAction(etat) #choix aléatoire d'une action a partir de s 
		else : 
			action = (argmaxQ (etat))

		etat_suivant = executer (action , etat)
		
		
		QQ[ (etat ,action) ] = alpha * (recompense(etat) + gamma * (maxQ( etat_suivant)) + (1 - alpha)*Q(etat ,action))
		alpha *= 0.99
		epsilon *= 0.99
		if (etat_suivant.stock == 0 or etat_suivant.heure == 60 * 24):
			break
	    
